{"status":"ok","feed":{"url":"https://medium.com/feed/@@vanshikachhikara12","title":"Stories by Vanshika Chhikara on Medium","link":"https://medium.com/@vanshikachhikara12?source=rss-8a92b06a8520------2","author":"","description":"Stories by Vanshika Chhikara on Medium","image":"https://cdn-images-1.medium.com/fit/c/150/150/0*ORTXk_vdz6w_PyYy"},"items":[{"title":"What is an API?","pubDate":"2025-04-17 19:36:40","link":"https://medium.com/@vanshikachhikara12/what-is-an-api-1cb8e4f876d9?source=rss-8a92b06a8520------2","guid":"https://medium.com/p/1cb8e4f876d9","author":"Vanshika Chhikara","thumbnail":"","description":"\n<p>From budding startups to tech giants, APIs have a key role in their product development.</p>\n<p>But what exactly is an\u00a0API?</p>\n<p>API stands for <strong>Application Programming Interface. </strong>These are the fuel to most modern applications like Gmail, Uber, Spotify\u200a\u2014\u200ayou name it. APIs are a piece of code that contain certain logic where users provide <strong>input </strong>and expect an <strong>output </strong>which is <strong>served </strong>to them by the <strong>APIs</strong>. Think of an API as a waiter who brings our order to the table from the restaurant kitchen.</p>\n<p>APIs generally follow the client-server architecture where the client requests some data from the server through an API call and the server returns the response through\u00a0API.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/808/1*sW8fNQ1fF40kYtCpniofMw.png\"><figcaption>Client-Server Architecture</figcaption></figure><h3>Types Of\u00a0APIs</h3>\n<p>APIs can be classified on the basis of accessibility, use cases, communication methods and protocols.</p>\n<ol><li><strong>Public APIs</strong></li></ol>\n<p>Open APIs are <strong>publicly available</strong> with no or minimal restrictions so that developers can access the proprietary software or web services served by the API. They are often <strong>free </strong>to use but might require authentication or include rate limits (no of API requests you can make per second). Rate limits are applied to prevent API\u00a0abuse.</p>\n<p>Public APIs can be used to <strong>integrate third party </strong>services into our application(ex:- google login) or <strong>access public data</strong> (ex:- weather\u00a0API)</p>\n<p><strong>Example:- </strong>Google Maps API, Instagram API, Open Weather API\u00a0etc.,</p>\n<p>2. <strong>Partner\u00a0APIs</strong></p>\n<p>Partner APIs are shared exclusively among <strong>business partners </strong>to enable collaboration, often under legal agreements. They are not publicly available and <strong>require authentication and access\u00a0rights.</strong></p>\n<p>Partner APIs can be incorporated by banks to collaborate with digital payment applications or E-Commerce platforms to work with logistics partners.</p>\n<p><strong>Example:-</strong> PayPal Partner API, Amazon Selling Partner API<strong>,</strong> Airbnb Partner\u00a0API</p>\n<p>3. <strong>Private\u00a0APIs</strong></p>\n<p>Internal APIs are used <strong>within an organization</strong> to connect different systems, microservices, or departments. They are not exposed to external developers. These APIs have <strong>high performance and low-latency </strong>(latency means the delay between an action and its response)</p>\n<p>Internal APIs are used to connect microservices in a cloud-native app or communication between frontend and backend\u00a0systems.</p>\n<p><strong>Example:-</strong> Netflix\u2019s internal APIs for microservices, Uber\u2019s internal APIs for ride-matching etc.,</p>\n<p>4. <strong>Programming APIs</strong></p>\n<p>Programming APIs provide <strong>pre-defined functions</strong> in a programming languages which developers can leverage to make development easier and more time-efficient.</p>\n<p>Example:- <strong>Python\u2019s built-in list\u00a0API</strong></p>\n<h3>How do APIs\u00a0work?</h3>\n<p>There are different <strong>communication methods </strong>and <strong>protocols</strong> that define how requests are sent, how data is received and developers have to often decide upon which method to use as it directly <strong>affects </strong>the <strong>scalability </strong>and <strong>security </strong>of the application.</p>\n<ol><li><strong>REST (Representational State Transfer)</strong></li></ol>\n<p>REST APIs are the most <strong>commonly </strong>used API communication method as they are <strong>stateless </strong>(which means every request client sends to the server is independent and contains all information required to understand and process it), <strong>resource-based</strong>, easy-to-use, human readable, use highly secure <strong>HTTP methods</strong>(GET, POST, PUT, DELETE) and typically <strong>return JSON/XML</strong> which can be efficiently used to render the response on the\u00a0site.</p>\n<p><strong>Example:-</strong></p>\n<pre>GET https://api.openweathermap.org/data/3.0/onecall/overview?lon=-11.8092&amp;lat=51.509865&amp;appid={API key}</pre>\n<pre>{<br>   \"lat\": 51.509865,<br>   \"lon\": -0.118092,<br>   \"tz\": \"+01:00\",<br>   \"date\": \"2024-05-13\",<br>   \"units\": \"metric\",<br>   \"weather_overview\": \"The current weather is overcast with a <br>temperature of 16\u00b0C and a feels-like temperature of 16\u00b0C.\"<br>}      </pre>\n<p><strong>When should one use REST\u00a0APIs?</strong></p>\n<p>Although REST APIs are easy-to-use but they have some <strong>cons\u00a0</strong>like:-</p>\n<ul>\n<li>Over-fetching / Under-fetching: Clients may get too much or too little\u00a0data.</li>\n<li>Multiple Round Trips: Complex workflows may require many\u00a0calls.</li>\n<li>No Standardized Schema: Swagger/Open API helps but isn\u2019t enforced.</li>\n</ul>\n<p>So it\u2019s important to understand that REST APIs are <strong>best suited</strong>\u00a0when:</p>\n<p>(a) accessing or<strong> </strong>integrating <strong>public\u00a0APIs</strong></p>\n<p>(b) the application is <strong>CRUD </strong>operation heavy.</p>\n<p>(c) <strong>caching </strong>is important (as REST APIs provide caching via HTTP caching headers.)</p>\n<p>2. <strong>Graph\u00a0QL</strong></p>\n<p>Graph QL is a modern <strong>query language</strong> for APIs and a <strong>runtime </strong>to <strong>fulfill </strong>those <strong>queries</strong>. Graph QL is based upon a simple idea of<em> serving exactly what the user asks for</em> nothing more, nothing less. It provides more <strong>control </strong>to the <strong>client </strong>over data. It was initially developed by Facebook in 2012 internally and then made open-source in 2015. Graph QL uses a <strong>type system</strong> and makes it easier for APIs to evolve over\u00a0time.</p>\n<p><strong>Example:</strong></p>\n<pre>{<br>  books{<br>    title<br>  }<br>}</pre>\n<pre>{<br>  \"data\": {<br>    \"books\": [<br>      {<br>        \"title\": \"Harry Potter and the Secret of the CMS\"<br>      },<br>      {<br>        \"title\": \"Geronimo Stilton: The Case of the Missing Content\"<br>      },<br>      {<br>        \"title\": \"The Magic Treehouse: Adventures in Headless Land\"<br>      },<br>      {<br>        \"title\": \"Percy Jackson and the GraphQL Oracle\"<br>      }<br>    ]<br>  }<br>}</pre>\n<p><strong>When should one use Graph QL\u00a0?</strong></p>\n<p>Although Graph QL have many <strong>pros </strong>such as precise data fetching, flexibility, reduction in network calls but they also have some <strong>cons </strong>such\u00a0as:</p>\n<ul>\n<li>\n<strong>Complexity\u200a</strong>\u2014\u200aRequires schema design &amp; resolver\u00a0logic.</li>\n<li>\n<strong>Performance Issues\u200a</strong>\u2014\u200aDeeply nested queries can overload the\u00a0server.</li>\n<li>\n<strong>Caching is Harder</strong> (compared to\u00a0REST).</li>\n</ul>\n<p>So it\u2019s important to understand that Graph QL APIs are <strong>best suited</strong>\u00a0when:</p>\n<p>(a) Apps have <strong>dynamic data</strong> requirements (e.g., dashboards).</p>\n<p>(b)<strong> Mobile apps </strong>need optimized payloads.</p>\n<p>(c) <strong>Microservices </strong>aggregating data from multiple\u00a0sources.</p>\n<p>3. <strong>gRPC</strong></p>\n<p>gRPC is an open source framework designed by google to <strong>work with </strong>remote procedure calls\u00a0<strong>(RPCs)</strong>.</p>\n<p><em>What is a remote procedure call?</em></p>\n<p>Remote Procedure Call is a <strong>client-server communication</strong> which uses <strong>function calls</strong> instead of HTTP calls and gRPC facilitates this interaction.</p>\n<p>gRPC (Google Remote Procedure Call) is a modern, <strong>binary protocol</strong> for efficient <strong>server-to-server</strong> communication</p>\n<p><strong>When should one use\u00a0gRPC?</strong></p>\n<p>(a) <strong>Micro</strong>services<strong> </strong>communication</p>\n<p>(b) <strong>Real-time </strong>systems<strong> </strong>(e.g., gaming,\u00a0chat)</p>\n<p>(c) <strong>Internal </strong>APIs<strong> </strong>(backend-to-backend)</p>\n<p>4. <strong>Web\u00a0Sockets</strong></p>\n<p>Web Sockets enable <strong>persistent</strong>, <strong>full-duplex communication </strong>between clients and servers, perfect for real-time apps like chat, live feeds, or multiplayer games.</p>\n<p><strong>When should one use Web\u00a0Sockets?</strong></p>\n<p>(a) Live\u00a0chat</p>\n<p>(b) Real-time dashboards</p>\n<p>(c) Multiplayer games</p>\n<p>(d) Collaborative editing</p>\n<p><strong>Next Steps:</strong></p>\n<ul>\n<li>Try a free API (like <a href=\"https://openweathermap.org/api\">OpenWeatherMap</a>).</li>\n<li>Build your first API (Node.js + Express tutorial?).</li>\n<li>Explore API security (OAuth, API\u00a0keys).</li>\n<li>Read more about Rate Limits and Error Handling.</li>\n</ul>\n<p>This was all about APIs, they are the <strong>unsung heroes</strong> of modern software, enabling apps to communicate seamlessly. Whether you use <strong>REST, GraphQL, gRPC, or WebSockets</strong>, understanding APIs unlocks endless possibilities. Now go build something awesome!</p>\n<p>With \u2764\ufe0f</p>\n<p>Vanshika Chhikara</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=1cb8e4f876d9\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>From budding startups to tech giants, APIs have a key role in their product development.</p>\n<p>But what exactly is an\u00a0API?</p>\n<p>API stands for <strong>Application Programming Interface. </strong>These are the fuel to most modern applications like Gmail, Uber, Spotify\u200a\u2014\u200ayou name it. APIs are a piece of code that contain certain logic where users provide <strong>input </strong>and expect an <strong>output </strong>which is <strong>served </strong>to them by the <strong>APIs</strong>. Think of an API as a waiter who brings our order to the table from the restaurant kitchen.</p>\n<p>APIs generally follow the client-server architecture where the client requests some data from the server through an API call and the server returns the response through\u00a0API.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/808/1*sW8fNQ1fF40kYtCpniofMw.png\"><figcaption>Client-Server Architecture</figcaption></figure><h3>Types Of\u00a0APIs</h3>\n<p>APIs can be classified on the basis of accessibility, use cases, communication methods and protocols.</p>\n<ol><li><strong>Public APIs</strong></li></ol>\n<p>Open APIs are <strong>publicly available</strong> with no or minimal restrictions so that developers can access the proprietary software or web services served by the API. They are often <strong>free </strong>to use but might require authentication or include rate limits (no of API requests you can make per second). Rate limits are applied to prevent API\u00a0abuse.</p>\n<p>Public APIs can be used to <strong>integrate third party </strong>services into our application(ex:- google login) or <strong>access public data</strong> (ex:- weather\u00a0API)</p>\n<p><strong>Example:- </strong>Google Maps API, Instagram API, Open Weather API\u00a0etc.,</p>\n<p>2. <strong>Partner\u00a0APIs</strong></p>\n<p>Partner APIs are shared exclusively among <strong>business partners </strong>to enable collaboration, often under legal agreements. They are not publicly available and <strong>require authentication and access\u00a0rights.</strong></p>\n<p>Partner APIs can be incorporated by banks to collaborate with digital payment applications or E-Commerce platforms to work with logistics partners.</p>\n<p><strong>Example:-</strong> PayPal Partner API, Amazon Selling Partner API<strong>,</strong> Airbnb Partner\u00a0API</p>\n<p>3. <strong>Private\u00a0APIs</strong></p>\n<p>Internal APIs are used <strong>within an organization</strong> to connect different systems, microservices, or departments. They are not exposed to external developers. These APIs have <strong>high performance and low-latency </strong>(latency means the delay between an action and its response)</p>\n<p>Internal APIs are used to connect microservices in a cloud-native app or communication between frontend and backend\u00a0systems.</p>\n<p><strong>Example:-</strong> Netflix\u2019s internal APIs for microservices, Uber\u2019s internal APIs for ride-matching etc.,</p>\n<p>4. <strong>Programming APIs</strong></p>\n<p>Programming APIs provide <strong>pre-defined functions</strong> in a programming languages which developers can leverage to make development easier and more time-efficient.</p>\n<p>Example:- <strong>Python\u2019s built-in list\u00a0API</strong></p>\n<h3>How do APIs\u00a0work?</h3>\n<p>There are different <strong>communication methods </strong>and <strong>protocols</strong> that define how requests are sent, how data is received and developers have to often decide upon which method to use as it directly <strong>affects </strong>the <strong>scalability </strong>and <strong>security </strong>of the application.</p>\n<ol><li><strong>REST (Representational State Transfer)</strong></li></ol>\n<p>REST APIs are the most <strong>commonly </strong>used API communication method as they are <strong>stateless </strong>(which means every request client sends to the server is independent and contains all information required to understand and process it), <strong>resource-based</strong>, easy-to-use, human readable, use highly secure <strong>HTTP methods</strong>(GET, POST, PUT, DELETE) and typically <strong>return JSON/XML</strong> which can be efficiently used to render the response on the\u00a0site.</p>\n<p><strong>Example:-</strong></p>\n<pre>GET https://api.openweathermap.org/data/3.0/onecall/overview?lon=-11.8092&amp;lat=51.509865&amp;appid={API key}</pre>\n<pre>{<br>   \"lat\": 51.509865,<br>   \"lon\": -0.118092,<br>   \"tz\": \"+01:00\",<br>   \"date\": \"2024-05-13\",<br>   \"units\": \"metric\",<br>   \"weather_overview\": \"The current weather is overcast with a <br>temperature of 16\u00b0C and a feels-like temperature of 16\u00b0C.\"<br>}      </pre>\n<p><strong>When should one use REST\u00a0APIs?</strong></p>\n<p>Although REST APIs are easy-to-use but they have some <strong>cons\u00a0</strong>like:-</p>\n<ul>\n<li>Over-fetching / Under-fetching: Clients may get too much or too little\u00a0data.</li>\n<li>Multiple Round Trips: Complex workflows may require many\u00a0calls.</li>\n<li>No Standardized Schema: Swagger/Open API helps but isn\u2019t enforced.</li>\n</ul>\n<p>So it\u2019s important to understand that REST APIs are <strong>best suited</strong>\u00a0when:</p>\n<p>(a) accessing or<strong> </strong>integrating <strong>public\u00a0APIs</strong></p>\n<p>(b) the application is <strong>CRUD </strong>operation heavy.</p>\n<p>(c) <strong>caching </strong>is important (as REST APIs provide caching via HTTP caching headers.)</p>\n<p>2. <strong>Graph\u00a0QL</strong></p>\n<p>Graph QL is a modern <strong>query language</strong> for APIs and a <strong>runtime </strong>to <strong>fulfill </strong>those <strong>queries</strong>. Graph QL is based upon a simple idea of<em> serving exactly what the user asks for</em> nothing more, nothing less. It provides more <strong>control </strong>to the <strong>client </strong>over data. It was initially developed by Facebook in 2012 internally and then made open-source in 2015. Graph QL uses a <strong>type system</strong> and makes it easier for APIs to evolve over\u00a0time.</p>\n<p><strong>Example:</strong></p>\n<pre>{<br>  books{<br>    title<br>  }<br>}</pre>\n<pre>{<br>  \"data\": {<br>    \"books\": [<br>      {<br>        \"title\": \"Harry Potter and the Secret of the CMS\"<br>      },<br>      {<br>        \"title\": \"Geronimo Stilton: The Case of the Missing Content\"<br>      },<br>      {<br>        \"title\": \"The Magic Treehouse: Adventures in Headless Land\"<br>      },<br>      {<br>        \"title\": \"Percy Jackson and the GraphQL Oracle\"<br>      }<br>    ]<br>  }<br>}</pre>\n<p><strong>When should one use Graph QL\u00a0?</strong></p>\n<p>Although Graph QL have many <strong>pros </strong>such as precise data fetching, flexibility, reduction in network calls but they also have some <strong>cons </strong>such\u00a0as:</p>\n<ul>\n<li>\n<strong>Complexity\u200a</strong>\u2014\u200aRequires schema design &amp; resolver\u00a0logic.</li>\n<li>\n<strong>Performance Issues\u200a</strong>\u2014\u200aDeeply nested queries can overload the\u00a0server.</li>\n<li>\n<strong>Caching is Harder</strong> (compared to\u00a0REST).</li>\n</ul>\n<p>So it\u2019s important to understand that Graph QL APIs are <strong>best suited</strong>\u00a0when:</p>\n<p>(a) Apps have <strong>dynamic data</strong> requirements (e.g., dashboards).</p>\n<p>(b)<strong> Mobile apps </strong>need optimized payloads.</p>\n<p>(c) <strong>Microservices </strong>aggregating data from multiple\u00a0sources.</p>\n<p>3. <strong>gRPC</strong></p>\n<p>gRPC is an open source framework designed by google to <strong>work with </strong>remote procedure calls\u00a0<strong>(RPCs)</strong>.</p>\n<p><em>What is a remote procedure call?</em></p>\n<p>Remote Procedure Call is a <strong>client-server communication</strong> which uses <strong>function calls</strong> instead of HTTP calls and gRPC facilitates this interaction.</p>\n<p>gRPC (Google Remote Procedure Call) is a modern, <strong>binary protocol</strong> for efficient <strong>server-to-server</strong> communication</p>\n<p><strong>When should one use\u00a0gRPC?</strong></p>\n<p>(a) <strong>Micro</strong>services<strong> </strong>communication</p>\n<p>(b) <strong>Real-time </strong>systems<strong> </strong>(e.g., gaming,\u00a0chat)</p>\n<p>(c) <strong>Internal </strong>APIs<strong> </strong>(backend-to-backend)</p>\n<p>4. <strong>Web\u00a0Sockets</strong></p>\n<p>Web Sockets enable <strong>persistent</strong>, <strong>full-duplex communication </strong>between clients and servers, perfect for real-time apps like chat, live feeds, or multiplayer games.</p>\n<p><strong>When should one use Web\u00a0Sockets?</strong></p>\n<p>(a) Live\u00a0chat</p>\n<p>(b) Real-time dashboards</p>\n<p>(c) Multiplayer games</p>\n<p>(d) Collaborative editing</p>\n<p><strong>Next Steps:</strong></p>\n<ul>\n<li>Try a free API (like <a href=\"https://openweathermap.org/api\">OpenWeatherMap</a>).</li>\n<li>Build your first API (Node.js + Express tutorial?).</li>\n<li>Explore API security (OAuth, API\u00a0keys).</li>\n<li>Read more about Rate Limits and Error Handling.</li>\n</ul>\n<p>This was all about APIs, they are the <strong>unsung heroes</strong> of modern software, enabling apps to communicate seamlessly. Whether you use <strong>REST, GraphQL, gRPC, or WebSockets</strong>, understanding APIs unlocks endless possibilities. Now go build something awesome!</p>\n<p>With \u2764\ufe0f</p>\n<p>Vanshika Chhikara</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=1cb8e4f876d9\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["engineering","api","web-development","computer-science","software-development"]}]}